HttpClient
HttpClient 是 dart 自带的网络请求方式，在 dart:io 包下。使用 HttpClient 作为请求分以下几个步骤

创建 HttpClient 实例

HttpClient client = HttpClient();
打开连接，并设置一些头参数，请求参数等

// 如果 url 中没有查询参数可直接创建
Uri uri = Uri.parse('https://www.xxx.com');
// 如果存在查询参数则在 Uri 中添加
Uri uri = Uri(scheme: 'https', host: 'www.xxx.com', queryParameters: {'a': 'AAA'});
// 打开连接
HttpClientRequest request = await client.getUrl(uri);
request.headers.add('token', 'Bear ${'x' * 20}'); // 添加头部 token 信息
// 如果是 post 或者 put 请求，通过 `add` 添加请求体
// 因为 `add` 方法需要传入 `List<int>` 参数，可以通过 utf8.encode 进行编码
request.add(utf8.encode('{"a": "aaa"}'));
// 也可以通过添加流的方式进行添加
request.addStream(input);
连接服务器

// 设置 request 后通过 request.close() 获取一个响应对象 HttpClientResponse，
// 包括响应头，响应内容等
HttpClientResponse response = await request.close();
读取服务器响应内容

String responseBody = await response.transform(utf8.decoder).join();
关闭实例

client.close();
例如我们要去请求 Bird.so 的首页并显示，我们可以这么实现

_httpClientRequest() async {
    HttpClient client;
    // try catch finally 用于捕获请求过程中发生的异常，在 finally 中设置保证 client 能够关闭
    try {
      client = HttpClient();
      HttpClientRequest request = await client.getUrl(Uri.parse(_BIRD_SO_URL));
      HttpClientResponse response = await request.close();
      String strResponse = await response.transform(utf8.decoder).join();
      setState(() => _netBack = strResponse);
    } catch (e) {
      print('${e.toString()}');
      setState(() => _netBack = 'Fail');
    } finally {
      client.close();
    }
  }
最后实现的效果

client.gif
很显然，用 HttpClient 请求相对来说是个非常麻烦的过程，如果要涉及到文本上传之类的，那么就会更麻烦了，所以这边引入一个网络请求的插件 dio，写本文的时候版本为 2.1.0

Dio
dio 是个非常强大的网络请求库，他的方式类似 OkHttp，我们可以直接查看官方文档，使用方式非常简单，创建一个 Dio 实例，然后就可以通过 get，post 等方式发起请求，返回 Future<Response>，而且支持多个并发请求，可以设置返回响应的类型，监听上传下载进度等等，看着就很给力。对于简单的方式，这边就不做太多介绍，主要讲下拦截器，也是非常给力的一部分。比如我们需要请求这么个接口 https://randomuser.me/api/

json.png
这个接口通过 get 请求，可以加入任意的查询参数。比如我们需要实现一个请求加解密的过程，如果每次都在上传参数或者返回请求的时候去加密，解密的话，就做了非常多无用功了，那么这时候拦截器就派上用场了。先定义下加解密的规则，上传的参数统一转为小写，不存在大写，请求回的数据，不能含有 info 字段。看下如何实现

_dioRequest() async {
    BaseOptions options = BaseOptions(connectTimeout: 5000, receiveTimeout: 60000);
    Dio dio = Dio(options);
    
    dio.interceptors.add(InterceptorsWrapper(onRequest: (opt) {
      // 获取查询的参数
      Map params = opt.queryParameters;
      // 将所有的参数转为小写，因为查询参数通过 map 形式上传
      params.forEach((key, value) => 
                       opt.queryParameters[key] = '$value'.toLowerCase());
      // 这边还可以做些别的操作，例如需要 token 进行用户身份验证，则通过头部进行添加
      // opt.headers['authorization'] = 'token';
      // 在官网中，提供了 lock 和 unlock 的写法，被 lock 后，接下来的请求会进入队列等待，
      // 直到 unlock 后才能继续，可以用于几个请求，后续的需要用到前面的返回值的情况使用
        
      // 返回修改后的 RequestOptions
      return opt;
    }, onResponse: (resp) {
      // 返回响应体后，将 info 字段的内容切除，并将 json 拼接完成
      resp.data = '${'${resp.data}'.split(', info').first}}';
      return resp;
    }, onError: (error) {
      // 发生错误时的回调
      return error;
    }));

    // 发送一个请求，可以查看下打印的结果
    Response response = await dio.get(_USER_ME_URL, queryParameters: {'a': 'AAA', 'b': 'BbBbBb'});
    print(response.data);
    print(response.request.headers);
    print(response.request.queryParameters);
    setState(() => _netBack = response.data.toString()); // 界面显示 response.data
  }
看下最后的显示信息

header.png
response.png
请求体的头部成功加上了 authorization 参数，请求的参数全部变为小写，返回的信息也把 info 字段值去除。在很多时候，请求接口后，需要将 json 转换成 pojo 类来处理，可以通过 json_serializable 这个三方插件实现，这边提供文章 Flutter Json自动反序列化，当然这种方式比较麻烦，这里推荐个 Android Studio 下的插件 dart_json_format 直接搜索就可以，如果用的是 Vitual Code 或者别的不是 JetBrains 系列的，这里有个转换的网址 JsonToDart。

